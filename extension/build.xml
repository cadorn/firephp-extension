<?xml version="1.0"?>

<project name="org.FirePHP.Clients.LegacyFirefoxExtension" default="dev-launch" basedir=".">

  <property name="build.package.path" value="${project.basedir}/../"/>

  <php function="realpath" returnProperty="build.package.path">
    <param value="${build.package.path}"/>
  </php>

  <target name="prepare">

	  <php function="date" returnProperty="build.date.stamp">
	    <param value="Ymd.Hi"/>
	  </php>
		
		<copy todir="${build.package.path}/build" overwrite="true">
		  <fileset dir="${project.basedir}">
	         <include name="build.local.properties" />
	         <include name="build.properties" />
		  </fileset>
		  <filterchain>
		    <replacetokens begintoken="%%" endtoken="%%">
		      <token key="build.date.stamp" value="${build.date.stamp}" />
		    </replacetokens>
		  </filterchain>
		</copy>
	
	  <property file="${build.package.path}/build/build.local.properties" />
	  <property file="${build.package.path}/build/build.properties" />

      <php function="md5" returnProperty="hash">
        <param value="${build.package.path}:${Extension.ID}:${Stability}:${Version}"/>
      </php>
      
      <property name="package.instance.hash" value="${hash}"/>

  </target>  

  <target name="build" depends="prepare">

    <delete dir="${build.package.path}/build/extension" includeemptydirs="true" verbose="false" failonerror="true" />
    <mkdir dir="${build.package.path}/build/extension" />

    <phingcall target="build-copy">
        
        <property name="build.copy.source" value="${project.basedir}"/>
        <property name="build.copy.target" value="${build.package.path}"/>
        
    </phingcall>
	
    <if>
     <equals arg1="${build.package.path}" arg2="${project.basedir}" />
     <then>
     	<!-- The build target was called from our and for our package -->
     </then>
     <else>
        <!-- The build target was called from a different package -->
        <echo message="Copy files from original package"/>
		
        <phingcall target="build-copy">
        	
            <property name="build.copy.source" value="${build.package.path}"/>
            <property name="build.copy.target" value="${build.package.path}"/>
			
        </phingcall>

     </else>
    </if>
    
  </target>
  

  <target name="build-copy">
		
	<property name="available" value="false" override="true"/>
	<available file="${build.copy.source}/install.rdf.tpl.xml" property="available"/>

    <if>
     <equals arg1="${available}" arg2="true" />
     <then>
	    <copy file="${build.copy.source}/install.rdf.tpl.xml"
		      tofile="${build.copy.target}/build/extension/install.rdf"
			  overwrite="true">
	      <filterchain>
	        <replacetokens begintoken="%%" endtoken="%%">
	          <token key="Extension.ID" value="${Extension.ID}" />
	          <token key="Extension.Name" value="${Extension.Name}" />
	          <token key="Extension.Creator" value="${Extension.Creator}" />
	          <token key="Extension.Description" value="${Extension.Description}" />
	          <token key="Extension.HomepageURL" value="${Extension.HomepageURL}" />
	          <token key="Extension.IconURL" value="${Extension.IconURL}" />
	          <token key="Extension.UpdateURL" value="${Extension.UpdateURL}" />
	          <token key="Extension.UpdateKey" value="${Extension.UpdateKey}" />
	          <token key="Extension.OptionsURL" value="${Extension.OptionsURL}" />
	          <token key="Version" value="${Version}" />
	          <token key="Release" value="${Release}" />
	        </replacetokens>
	      </filterchain>
	    </copy>
     </then>
    </if>

	<copy todir="${build.copy.target}/build/extension" overwrite="true">
	  <fileset dir="${build.copy.source}">
    	 <include name="chrome/**" />
    	 <include name="defaults/**" />
         <include name="components/**" />
         <include name="modules/**" />
    	 <include name="chrome.manifest" />
    	 <include name="install.rdf" />
	  </fileset>
  	  <filterchain>
	    <replacetokens begintoken="%%" endtoken="%%">
          <token key="Extension.ID" value="${Extension.ID}" />
          <token key="Extension.InternalAppName" value="${Extension.InternalAppName}" />
          <token key="Extension.Name" value="${Extension.Name}" />
          <token key="Version" value="${Version}" />
          <token key="Release" value="${Release}" />
	    </replacetokens>
	  </filterchain>
	</copy>


    <property name="available" value="false" override="true"/>
    <available file="${build.copy.source}/update.rdf.tpl.xml" property="available"/>

    <if>
     <equals arg1="${available}" arg2="true" />
     <then>
	    <copy file="${build.copy.source}/update.rdf.tpl.xml" tofile="${build.copy.target}/build/extension/update.rdf" overwrite="true">
	      <filterchain>
	        <replacetokens begintoken="%%" endtoken="%%">
	          <token key="Extension.ID" value="${Extension.ID}" />
	          <token key="Extension.UpdateLinkURL" value="${Extension.UpdateLinkURL}" />
	          <token key="Extension.UpdateInfoURL" value="${Extension.UpdateInfoURL}" />
	          <token key="Version" value="${Version}" />
	          <token key="Release" value="${Release}" />
	        </replacetokens>
	      </filterchain>
	    </copy>
     </then>
    </if>

  </target>


  <target name="dist" depends="build">
      
    <delete dir="${build.package.path}/build/dist" includeemptydirs="true" verbose="false" failonerror="true" />
    <mkdir dir="${build.package.path}/build/dist" />
      
    
    <move file="${build.package.path}/build/extension/update.rdf" tofile="${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.rdf" overwrite="true"/>
    
    <zip destfile="${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.xpi">
     <fileset dir="${build.package.path}/build/extension">
         <include name="**" />
     </fileset>
    </zip>

    <echo msg="Sign install.rdf with McCoy" />
    
    <php function="sha1_file" returnProperty="xpi.hash">
      <param value="${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.xpi"/>
    </php>
    
    <exec command="${mccoy.bin.path} -sign 'file://${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.rdf' -key '${mccoy.key.name}' -hash 'sha1:${xpi.hash}' -addOnFileName '${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.xpi'" passthru="true"/>
  
    <echo message="RUN: git tag ${Version}${Release}"/>
  
  </target>
  
    
    
    <target name="upload" depends="prepare">
      
        <exec command="scp ${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.xpi ${upload.user}@${upload.server}:${upload.xpi.path}" passthru="true"/>
        <exec command="scp ${build.package.path}/build/dist/FirePHP-FirefoxExtension-${Version}${Release}.rdf ${upload.user}@${upload.server}:${upload.updaterdf.path}" passthru="true"/>
       
    </target>

      
</project>
